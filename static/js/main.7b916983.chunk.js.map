{"version":3,"sources":["components/Square.js","components/DisplayResult.js","components/Board.js","components/ChoosePlayer.js","index.js"],"names":["Square","props","styleClass","value","AI","winnerLine","length","id","className","onClick","DisplayResult","state","hidden","setTimeout","setState","document","querySelector","style","display","this","waitBeforeShow","result","human","replay","Component","Board","squares","Array","fill","numSquares","winner","turn","i","slice","calculateWinner","opponentMove","calculateOpponentMove","winnerAfterSetState","console","log","bind","vacantSquares","concat","filter","x","Math","floor","random","lines","a","b","c","handleClick","renderSquare","React","ChoosePlayer","handlePlayerSelection","Game","choice","setDisplayProperty","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7b916983.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Square = (props) => {\r\n    var styleClass = ''\r\n    if(props.value){\r\n        styleClass = 'square active'\r\n        if(props.AI === props.value){\r\n            styleClass += ' teal'\r\n        }\r\n        if((props.winnerLine).length !== 0){\r\n            if(props.id === props.winnerLine[0] || props.id === props.winnerLine[1] || props.id === props.winnerLine[2])\r\n            {\r\n            styleClass += ' winnerLine'\r\n            }\r\n        }\r\n    }\r\n    else{\r\n        styleClass = 'square'\r\n    }\r\n    return ( \r\n        <button id={props.id} className={styleClass} onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n     );\r\n}\r\n \r\nexport default Square;","import React, {Component} from 'react';\r\n\r\nclass DisplayResult extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\t\t\thidden : true\r\n\t\t};\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({hidden: false});\r\n\t\t\tdocument.querySelector(\".board-container\").style.display = \"none\";\r\n        }, this.props.waitBeforeShow);\r\n    }\r\n\r\n\trender() {\r\n\t\tlet result = ''\r\n\t\t\tif(this.props.result  === this.props.human){\r\n\t\t\t\tresult = \"You win!\"\r\n\t\t\t}\r\n\t\t\telse if(this.props.result === this.props.AI){\r\n\t\t\t\tresult = \"You lose!\"\r\n\t\t\t}\r\n\t\t\telse if(this.props.result === 'tie'){\r\n\t\t\tresult = \"Game tied!\"\r\n\t\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t\t(this.state.hidden) ? '' : <div className = \"displayResult\">\r\n\t\t\t\t\t<h1>{result}</h1>\r\n\t\t\t\t\t<button className = \"replay\" onClick = {this.props.replay}>Play again ?</button>\r\n\t\t\t\t</div> \r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default DisplayResult","import React from 'react';\r\nimport Square from './Square'\r\nimport DisplayResult from './DisplayResult'\r\n\r\nclass Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      squares: Array(9).fill(null),\r\n      numSquares: [0,1,2,3,4,5,6,7,8],\r\n      winner: '',\r\n      turn: 1, //to calculate if the game is tied\r\n      winnerLine: [] // to highlight the boxes of winning X's or O's\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const squares = this.state.squares.slice();\r\n    const numSquares = this.state.numSquares.slice();\r\n    // const winner = this.calculateWinner(squares);\r\n    // if (this.calculateWinner(squares) || squares[i]) {\r\n    //   return;\r\n    // }\r\n\r\n    if(this.calculateWinner(squares) !== null){\r\n      var [winner, winnerLine] = this.calculateWinner(squares)\r\n    }\r\n    if (winner || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    const opponentMove = this.calculateOpponentMove(i)\r\n    squares[i] = numSquares[i] = this.props.human;\r\n\r\n    this.setState({\r\n      squares: squares,\r\n      numSquares: numSquares,\r\n      turn: this.state.turn + 1\r\n    });\r\n\r\n    const winnerAfterSetState = this.calculateWinner(squares)\r\n    if(this.state.turn === 5 && winnerAfterSetState === null)\r\n    {\r\n        this.setState({winner: 'tie'})\r\n        return\r\n    }\r\n    else\r\n    {   \r\n        if(this.calculateWinner(squares) !== null){\r\n          const [winner, winnerLine] = this.calculateWinner(squares);\r\n          this.setState({\r\n          winner: winner,\r\n          winnerLine: winnerLine\r\n          })\r\n        }\r\n        else{\r\n          this.setState({\r\n          winner: winnerAfterSetState,\r\n          })\r\n        }    \r\n    }\r\n    console.log(this.state.turn)\r\n    const setOpponentMove = () => {\r\n      setTimeout(function() { // set a delay in the appearance of the opponent move\r\n        if(this.calculateWinner(squares) !== null){\r\n            var [winner, winnerLine] = this.calculateWinner(squares)\r\n          }\r\n        if (winner) {\r\n          return;\r\n        } \r\n        squares[opponentMove] = numSquares[opponentMove] = this.props.AI;\r\n        this.setState({\r\n          squares: squares,\r\n          numSquares: numSquares,\r\n          winner: winner\r\n        });\r\n        const winnerAfterSetState = this.calculateWinner(squares)\r\n        if(this.calculateWinner(squares) !== null){\r\n            const [winner, winnerLine] = this.calculateWinner(squares);\r\n            this.setState({\r\n            winner: winner,\r\n            winnerLine: winnerLine\r\n            })\r\n          }\r\n        else{\r\n          this.setState({\r\n          winner: winnerAfterSetState,\r\n          })\r\n        }   \r\n      }.bind(this),250); \r\n    }\r\n\t\tsetOpponentMove();\r\n  }\r\n\r\n  calculateOpponentMove(i){\r\n    // here we calculate the position of other player which should be anything but not i\r\n    const numSquares = this.state.numSquares.slice();\r\n\r\n    //Empty position array will hold the number between 0 to 8 except i from which a random number will be selected which will be the other player's position on the board\r\n    let emptyPosArray\r\n\r\n    // if i is 0, it should be any random number between 1 to 8 [1,2,3,4,5,6,8]\r\n    if(i === 0){\r\n      emptyPosArray = numSquares.slice(i+1)\r\n    }\r\n    // if i is last element, it should be anywhere in [0,1,2,3,4,5,6,7]\r\n    else if( i === 8 ){\r\n      emptyPosArray = numSquares.slice(0, i)\r\n    }\r\n    // if i is any number in between, e.g. 5, then it should be [0,1,2,3,4,6,7,8]\r\n    else{\r\n      emptyPosArray = numSquares.slice(0, i).concat(numSquares.slice(i + 1))\r\n    }\r\n\r\n    // filter the empty position array to find out the positions that are not filled by X and O's .\r\n    const vacantSquares = emptyPosArray.filter(x => {\r\n       return (x !== 'X') && (x !== 'O')\r\n     })\r\n    // find out any random number other than X and O positions to fill the next move \r\n    const opponentRandomMove = vacantSquares[Math.floor(Math.random() * vacantSquares.length)];\r\n    return opponentRandomMove\r\n  }\r\n\r\n  calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        //return squares[a];\r\n        return [ squares[a], lines[i] ]\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  replay = () => {\r\n    this.setState({\r\n      squares: Array(9).fill(null),\r\n      numSquares: [0,1,2,3,4,5,6,7,8],\r\n      winner: '',\r\n      turn: 1,\r\n      winnerLine: []\r\n    }); \r\n    document.querySelector(\".choosePlayer\").style.display = \"block\";\r\n    document.querySelector(\".board-container\").style.display = \"block\";\r\n    document.querySelector(\".board-container\").style.display = \"none\";\r\n  }\r\n  renderSquare(i) {\r\n    if(this.state.winnerLine !== []){\r\n      const [a,b,c] = this.state.winnerLine\r\n    }\r\n    return (\r\n      <Square \r\n        id={i}\r\n        value={this.state.squares[i]}\r\n        AI = {this.props.AI}\r\n        winnerLine = {this.state.winnerLine}\r\n        onClick={() => this.handleClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"board-container\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n        </div>\r\n\r\n        {(this.state.winner) ? <DisplayResult\r\n            result= {this.state.winner}\r\n            replay = {this.replay} \r\n            human = {this.props.human}\r\n            AI = {this.props.AI}\r\n            waitBeforeShow={1200}\r\n        /> : null }\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board","import React from 'react';\r\n\r\nconst ChoosePlayer = ({handlePlayerSelection}) => {\r\n\r\n    return ( \r\n        <div className=\"choosePlayer\">\r\n            <p>Choose Player</p>\r\n            <div className=\"players\">\r\n                <div onClick={handlePlayerSelection.bind(this,\"X\")}>X</div>\r\n                <div onClick={handlePlayerSelection.bind(this,\"O\")}>O</div>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default ChoosePlayer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Board from './components/Board'\r\nimport ChoosePlayer from './components/ChoosePlayer';\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      human: '',\r\n      AI: '', //Artificial Intelligence(computer)\r\n    };\r\n  }\r\n\r\n  handlePlayerSelection = (choice) => {\r\n      console.log(choice)\r\n      if (choice === \"X\") {\r\n          this.setState({\r\n            human: \"X\",\r\n            AI: \"O\"\r\n          });\r\n          this.setDisplayProperty();\r\n        }\r\n        else if (choice === \"O\") {\r\n          this.setState({\r\n            human: \"O\",\r\n            AI: \"X\"\r\n          });\r\n          this.setDisplayProperty();\r\n        }\r\n    }\r\n\r\n    setDisplayProperty() {\r\n      document.querySelector(\".choosePlayer\").style.display = \"none\";\r\n      document.querySelector(\".board-container\").style.display = \"flex\";\r\n    }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <ChoosePlayer\r\n            handlePlayerSelection = {(choice) => this.handlePlayerSelection(choice)} />\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n              <Board \r\n                human={this.state.human} \r\n                AI={this.state.AI}\r\n              />\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}